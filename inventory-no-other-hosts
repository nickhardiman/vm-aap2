# Remove other home lab hosts from this inventory.
# One pulp task attempts to connect to all hosts.
# See
#   'Check if any hosts already have the database fields encryption key'
# in
#   collections/ansible_collections/pulp/pulp_installer/roles/pulp_database_config/tasks/main.yml
#
# !!! better to sort DHCP and DNS before the playbook runs.
# otherwise 
#   TASK [ansible-target : add group] ********************
#   fatal: [antora1.lab.example.com]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: ssh: Could not resolve hostname antora1.lab.example.com: Name or service not known", "unreachable": true}


[automationcontroller]
control1.lab.example.com  node_type=control

[automationcontroller:vars]
peers=execution_nodes
#
[execution_nodes]
execution1.lab.example.com  node_type=execution

[automationhub]
hub1.lab.example.com

[database]

[servicescatalog_workers]

# Single Sign-On
# If sso_redirect_host is set, that will be used for application to connect to
# SSO for authentication. This must be reachable from client machines.
#
# ssohost.example sso_redirect_host=<host/ip>
[sso]

[all:vars]
admin_password='redhat'


# Automation Controller
# Certificate and key to install in nginx for the web UI and API
web_server_ssl_cert='/etc/pki/tls/certs/control1.lab.example.com.pem'
web_server_ssl_key='/etc/pki/tls/private/control1.lab.example.com.key'
pg_host=''
pg_port=''
pg_database='awx'
pg_username='awx'
pg_password='redhat'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL


# Execution Environment 
# Registry
registry_url='registry.redhat.io'
registry_username='my-developer-sub'
registry_password='mypass'
# Receptor Configuration
receptor_listener_port=27199


# Automation Hub
# Certificate and key to install in Automation Hub node
automationhub_admin_password='redhat'
# setup expects to find these files on ansible controller, not on the managed node 'hub1'
automationhub_ssl_cert='/etc/pki/tls/certs/hub1.lab.example.com.pem'
automationhub_ssl_key='/etc/pki/tls/private/hub1.lab.example.com.key'
# re-use controller's database service
# I'd prefer another postgres on hub1, but not figured that out yet. 
# I thought leaving this blank would create a standalone hub with own database, but no.
#automationhub_pg_host=''
automationhub_pg_host='control1.lab.example.com'
automationhub_pg_port=''
automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='redhat'
automationhub_pg_sslmode='prefer'


# Single Sign-On
# The default install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
# sso_keystore_password=''
# Single-Sign-On configuration
sso_console_admin_password='redhat'

GALAXY_ENABLE_API_ACCESS_LOG=true


